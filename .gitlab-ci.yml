image: alpine:latest

stages:
  - build
  - deploy
  - export_configuration

variables:
  DOCKER_IMAGE_NAME: "urbanlife:latest"
  CONTAINER_NAME: "urbanlife"
  CONTAINER_PORT: "8888"
  CONTAINER_CONFIG_FILE: "container_config.json"

build:
  stage: build
  before_script:
    - apk update
    - apk add --no-cache bash
    - apk add --no-cache docker-cli
    - docker ps -a
    - 'if [[ "$(docker ps -q -f "publish=$CONTAINER_PORT")" ]]; then docker stop $(docker ps -q -f "publish=$CONTAINER_PORT"); fi'
    - 'if [[ "$(docker ps -aq -f "publish=$CONTAINER_PORT" -f status=exited)" ]]; then docker rm $(docker ps -aq -f "publish=$CONTAINER_PORT" -f status=exited); fi'
    - docker stop $CONTAINER_NAME || true
    - docker rm -f $CONTAINER_NAME || true
    - sleep 10
    - docker ps -a
  script:
    - docker build -t $DOCKER_IMAGE_NAME .
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $DOCKER_IMAGE_NAME

deploy:
  stage: deploy
  script:
    - apk update
    - apk add --no-cache bash
    - apk add --no-cache docker-cli 
    - docker ps -a
    - docker images
    - 'if [[ "$(docker ps -q -f "publish=$CONTAINER_PORT")" ]]; then docker stop $(docker ps -q -f "publish=$CONTAINER_PORT"); fi'
    - 'if [[ "$(docker ps -aq -f "publish=$CONTAINER_PORT" -f status=exited)" ]]; then docker rm $(docker ps -aq -f "publish=$CONTAINER_PORT" -f status=exited); fi'
    - docker stop $CONTAINER_NAME || true
    - docker rm -f $CONTAINER_NAME || true
    - sleep 10
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $DOCKER_IMAGE_NAME
    - docker run -d -p $CONTAINER_PORT:5040 --name $CONTAINER_NAME $DOCKER_IMAGE_NAME
    - docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $CONTAINER_NAME

export_configuration:
  stage: export_configuration
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker container inspect $CONTAINER_NAME > $CONTAINER_CONFIG_FILE
