image: alpine:latest

stages:
  - build
  - deploy

variables:
  DOCKER_IMAGE_NAME: "urbanlife:latest"
  CONTAINER_NAME: "urbanlife"
  CONTAINER_PORT: "8888"

  
build:
  stage: build
  before_script:
    - apk update 
    - apk add --no-cache bash 
    - apk add --no-cache docker-cli

    - docker ps -a
    - 'if [[ "$(docker ps -q -f "publish=$CONTAINER_PORT")" ]]; then docker stop $(docker ps -q -f "publish=$CONTAINER_PORT"); fi'
    - 'if [[ "$(docker ps -aq -f "publish=$CONTAINER_PORT" -f status=exited)" ]]; then docker rm $(docker ps -aq -f "publish=$CONTAINER_PORT" -f status=exited); fi'
    - docker stop $CONTAINER_NAME || true
    - docker rm -f $CONTAINER_NAME || true
    - sleep 10
    - docker ps -a
    - docker images
  script:
    - docker --version
    - docker build -t $DOCKER_IMAGE_NAME .
    - docker images

deploy:
  stage: deploy
  script:
    - apk update 
    - apk add --no-cache bash 
    - apk add --no-cache docker-cli
    - apk add --no-cache curl
    - docker --version
    - docker ps -a
    - docker images
    - 'if [[ "$(docker ps -q -f "publish=$CONTAINER_PORT")" ]]; then docker stop $(docker ps -q -f "publish=$CONTAINER_PORT"); fi'
    - 'if [[ "$(docker ps -aq -f "publish=$CONTAINER_PORT" -f status=exited)" ]]; then docker rm $(docker ps -aq -f "publish=$CONTAINER_PORT" -f status=exited); fi'
    - docker stop $CONTAINER_NAME || true
    - docker rm -f $CONTAINER_NAME || true
    - sleep 10
    - docker ps -a
    - docker images
    - docker run -d -p $CONTAINER_PORT:5040 --name $CONTAINER_NAME $DOCKER_IMAGE_NAME
    - docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $CONTAINER_NAME
    - docker ps -a
    - docker ps
    - docker exec urbanlife ifconfig


